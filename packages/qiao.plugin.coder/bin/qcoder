#!/usr/bin/env node

'use strict';

// qiao
var qiao 	= require('qiao.util.all');
qiao.config	= require('../test/config.json');

// cmd for common
qiao.cli.cmd
	.version(require('../package.json').version, '-v, --version')
	.description('qiao.plugin.coder, generate server and browser code.')
	.usage('<command>');

// cmd for init code
qiao.cli.cmd
	.command('init <code> <path>')
	.alias('i')
	.description('init code to path')
	.action(initCode);

// cmd for gen code
qiao.cli.cmd
	.command('gen <code> <table> <path>')
	.alias('g')
	.description('gen code by table to path')
	.action(handleCode);

// parse
qiao.cli.cmd.parse(process.argv);

// output help
if(!process.argv.slice(2).length){
	qiao.cli.cmd.outputHelp(function(txt){
		return qiao.cli.colors.green(txt);
	});
}

// init code
function initCode(code, path){
	// check code
	if(qiao.config.codes.indexOf(code) == -1){
		console.log('error code, see: https://github.com/insistime/qiao.plugin.coder#code-list');
		return;
	}

	// init code
	var zipFile = require('path').resolve(__dirname, '../codes/' + code + '/init.zip');
	qiao.zip.unzip(zipFile, path);
}

// handle code
function handleCode(code, table, path){
	// check code
	if(qiao.config.codes.indexOf(code) == -1){
		console.log('error code, see: https://github.com/insistime/qiao.plugin.coder#code-list');
		return;
	}
	
	// gen code
	require('../codes/' + code + '/coder.js').gen(table, path);
}